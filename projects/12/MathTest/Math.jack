// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
	static Array twoToThe;
	
    /** Initializes the library. */
    function void init() {
		var int i, n;
		
		let twoToThe = Array.new(16);
		let n = 1;
		let i = 0;
		
		while (i < 16){
			
			let twoToThe[i] = n;
			let n = n + n;
			let i = i + 1;
			
			}
			
		return;
    }
	
	//Returns true if the i-th bit of x is 1, false otherwise
	function boolean bit( int x, int i){
		
		var int result;
		
		let result = x & twoToThe[i];
		
		return ~(result = 0);
	
	}	

    /** Returns the absolute value of x. */
    function int abs(int x){
	
		if ( x < 0 ) {
		
			let x = -x;
		}
			
		return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
	
    
    function int multiply( int x, int y) {
		var int sum, shiftedX, i ;
		
		let shiftedX = x ;
		let sum = 0;
		let i = 0;
		
		while( i < 16){
		
			if(Math.bit(y , i)){
				let sum = sum + shiftedX;
			}
			
			let i = i + 1;
			let shiftedX = shiftedX + shiftedX;	
		}
		
		return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide( int x, int y) {
		var int q; 					
		var boolean signX, signY, positive;
		
		let signX = x > 0;
		let signY = y > 0; 
		let positive = (signX & signY) | ((~signX) & (~signY));
		
		
		let x = Math.abs(x);   // divide |x| by |y| 
		let y = Math.abs(y);
		
		if (( y > x ) | (y < 0)) {
			return 0;
		}
		
		let q = Math.divide(x , y * 2);
		
		if ((x - (y*q*2)) < y){
			
			if ( positive ) {
				return q*2;
				}
				
			else {
				return -q*2;
			}
		}
		
		else {
			
			if (positive) {
				return (( q*2 ) + 1);
				}
			else {
				return -((q*2) + 1);
			}
		}
		
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
	
		var int  y,j,y2j,y2jTy2j;
		
		
		//Not sure if we are suposed to do this or return 0 if x < 0
		

		let y = 0;
		let j = 7;
		
		//let x = abs(x)
		
		while (~(j < 0)){
		
			//y2j = y + 2^j
			let y2j = y + twoToThe[j];
			let y2jTy2j = y2j * y2j;  // y2j * y2J
		
			if ((( y2jTy2j < x ) | (y2jTy2j = x)) & ( (y2jTy2j) > 0)) {
			
				let y = y2j;
			}
			
			let j = j - 1;
			
		}
		
		return y;
	
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
	
		if (a > b){
			return a;
			}	
			
		return b ;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		
		if (a < b){
			return a;
		}
		
		return b;
    }
}
