// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

	static Array ram, heap;
	static int freeList;
 
    /** Initializes the class. */
    function void init() {
		
		//set array ram to point to Location 0  RAM[0]
		let ram = 0;
		
		//Init heap
		let heap = 2048;
		let freeList = 2048; //list pointing to free blocks
		
		let heap[0] = 0;       //next     ram[freeList] = 0
		let heap[1] = 14335;    //Length     ram[freeList + 1] = 14335  (available memory) 
		
		return;
    }



    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		
		var int prev_seg,next_seg,free_seg,free_segAdd,block;
		var boolean found, exact;
		
		let found = false;     		//used to mark that a freeBlock is found
		let exact = false;     		//used to mark that an exact match was found
		let prev_seg = freeList;    //keeps track of the previous segment in the linked list
		let next_seg = freeList;    //keeps track of the next segment in the linked list
		let ram[2060] = -1;
		
		//search freeList using best-fit or first-fit 
		    //to get a segment with segment  size >= size + 2
		
		//check for first segment 
		while (~(next_seg = 0)) {
			
			if ((ram[next_seg + 1] > (size - 1)) & (ram[next_seg +1] < (size + 3 ))) {   //if an exact match was found, the whole segment will be allocated 
				let ram[2061] = -2;
				let free_seg = next_seg;
				let free_segAdd = prev_seg;
				let found = true;
				let exact = true;	
				let next_seg = 0;
			}
			
			else {
				
				if ( ram[next_seg + 1] > (size + 2 )){
				
					if (~found){
						let ram[2062] = -3;
						let free_seg = next_seg;
						let free_segAdd = prev_seg;
						let found = true ;
						let prev_seg = next_seg;
						let next_seg = ram[next_seg];
					}
					else {
					
						if ( ram[next_seg + 1] < ram[free_seg + 1]){
							let ram[2063] = -4;
							let free_seg = next_seg;
							let free_segAdd = prev_seg;
							let prev_seg = next_seg;
							let next_seg = ram[next_seg];
						}
						else {
							let ram[20564] = -5;
							let prev_seg = next_seg;
							let next_seg = ram[next_seg];
						}	
					}
				}
				
				else{
					let ram[2065] = -6;
					let prev_seg  = next_seg;
					let next_seg = ram[next_seg];	
				}
			}
		}	
			
		
		//if no such segment is found return failure // update later 
		   //( or attempt a Defrag) 
		   
				// do Memory.Defrag;
				// return Memory.alloc(size) 
		if (~found){
			//do Sys.error(2);
			do Sys.halt();
		}
		   
		//block = base address of the found space
		//update the freeList and the fields of block
		//to account for the allocation 
		if ( exact ){
			
			//check if the free_seg is not at the start of the free list, if yes change freeList to point to the next free segment
			if (free_segAdd = freeList){
				let ram[2067] = -7;
				let freeList = ram[free_seg];  			   //freeList = first_seg.next 
				let ram[free_seg] = ~ ram[free_seg +1];   //use the idea of Next = not(size) for allocated blocks... to check for double deAlloc
				let block = free_seg + 2 ; 				 //block = free_seg + overhead
			}
			else {
			    let ram[2068] = -8;
				let ram[free_segAdd] = ram[free_seg];  	  // prev_seg.next = free_seg.next 
				let ram[free_seg] = ~ram[free_seg +1];	 // free_seg.next = not(free_seg.size)
				let block = free_seg + 2;				// block = free_seg + overhead
			}
		}
			
		else {
				let ram[2069] = -9;
				let ram[free_seg + 1] = ram[free_seg + 1] - size - 2;     //change size of the freeblock to  old_size - (allocated_size - 2)
				let block = free_seg + ram[free_seg + 1] + 4;			 //calculation of block address from the old one
				let ram[block - 1] = size;   	 // set the size of the new block to size
				let ram[block - 2] = ~size;  	//same as above  used to check for allocations
					
			}
		
		let ram[2070] = -10 ;
		return block; 
	
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array segment) {
		
		var int prev_seg, next_seg; 
		
		let segment = segment - 2;	  // set the segment to its header address
		let prev_seg = freeList;  	  //set the start to freeList
		let next_seg = ram[prev_seg]; //set next to the next segment
		 
		//check if the segment was already deAllocated 
		if (~(ram[segment] = ~ram[segment + 1])){   //if next = ~(size) then the block is allocated else was already freed
			return;
		}
		
		//insert the the freed segement in ascending order for implicit Defrag implementation 
		

		// if segement should be instered in the begging of the list
		if(segment< freeList) {
		
			let ram[segment] = ram[freeList];
			let freeList = segment; 
		}
		
		else{
		
			//find the right place to insert the segement
			while ((~(next_seg=0))&( next_seg < segment)){
				let prev_seg = next_seg;
				let next_seg = ram[next_seg];	
			}
		
			let ram[prev_seg] = segment;
			let ram[segment] = next_seg;
		}
		
		//add an implicit defrag here as an update
			//here are now three defragmentation cases that need to be handled.

			//The deallocated segment immediately follows prev_seg.
			//next_seg immediately follows the deallocated segment.
			//All three segments are contiguous.

		//These three cases can be handled with two sequential operations

			//Combine segment with next_seg if contiguous.
				//if (segment + segment.blockSize + 2) == next_seg
				//segment.blockSize = segment.blockSize + next_seg.blockSize + 2;
				//segment.next = next_seg.next;

			//Combine segment with prev_seg if contiguous.
				//if (prev_seg + prev_seg.blockSize + 2) == segment
				//prev_seg.blockSize = prev_seg.blockSize + segment.blockSize + 2;
				//prev_seg.next = segment.next;

	
		return;
    }  

	/** Returns the RAM value at the given address. */
    function int peek(int address) {
		
		return ram[address];
		
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		
		let ram[address] = value;
		
		return;
    }
}
